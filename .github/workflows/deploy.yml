name: Deploy to itch.io

on:
  push:
    branches: [ release ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Create build-files directory and copy game files
      run: |
        mkdir -p build-files
        cp index.html build-files/
        cp -r styles build-files/
        cp -r js build-files/
    
    - name: Create builds directory and zip build-files contents
      run: |
        mkdir -p builds
        cd build-files
        zip -r ../builds/build.zip .
    
    - name: Setup Butler (itch.io CLI)
      run: |
        curl -L -o butler.zip https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default
        unzip butler.zip
        chmod +x butler
        sudo mv butler /usr/local/bin
    
    - name: Push to itch.io
      env:
        BUTLER_API_KEY: ${{ secrets.ITCH_IO_API_KEY }}
      run: |
        butler push builds/build.zip ${{ secrets.ITCH_USER }}/${{ secrets.ITCH_GAME }}:html
    
    - name: Check for devlog file
      id: check_devlog
      run: |
        if [ -f "devlogs/devlog.md" ]; then
          echo "devlog_exists=true" >> $GITHUB_OUTPUT
        else
          echo "devlog_exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Extract devlog title and body
      if: steps.check_devlog.outputs.devlog_exists == 'true'
      id: extract_devlog
      run: |
        # Read the devlog file
        DEVLOG_CONTENT=$(cat devlogs/devlog.md)
        
        # Extract title (first line starting with #)
        TITLE=$(echo "$DEVLOG_CONTENT" | grep -m 1 '^#' | sed 's/^# *//' | tr -d '\n')
        
        # If no title found, use default with timestamp
        if [ -z "$TITLE" ]; then
          TITLE="Build Update - $(date '+%Y-%m-%d %H:%M')"
        fi
        
        # Extract body (everything after the first title line)
        BODY=$(echo "$DEVLOG_CONTENT" | sed '0,/^#.*$/d' | sed '/^$/d' | head -c 8000)
        
        # If body is empty, use the entire content
        if [ -z "$BODY" ]; then
          BODY="$DEVLOG_CONTENT"
        fi
        
        # Save to environment (escape newlines and special characters for JSON)
        echo "DEVLOG_TITLE<<EOF" >> $GITHUB_ENV
        echo "$TITLE" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
        echo "DEVLOG_BODY<<EOF" >> $GITHUB_ENV
        echo "$BODY" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
        echo "Devlog title: $TITLE"
        echo "Devlog body length: ${#BODY} characters"
    
    - name: Get Game ID from itch.io API
      if: steps.check_devlog.outputs.devlog_exists == 'true'
      id: get_game_id
      env:
        BUTLER_API_KEY: ${{ secrets.ITCH_IO_API_KEY }}
      run: |
        # Get user's games to find the game ID
        RESPONSE=$(curl -s -H "Authorization: Bearer $BUTLER_API_KEY" \
          "https://itch.io/api/1/${{ secrets.ITCH_USER }}/my-games")
        
        echo "API Response: $RESPONSE"
        
        # Extract game ID using jq or grep/sed
        if command -v jq &> /dev/null; then
          GAME_ID=$(echo "$RESPONSE" | jq -r --arg game "${{ secrets.ITCH_GAME }}" \
            '.games[] | select(.url | contains($game)) | .id')
        else
          # Fallback without jq - this is more fragile
          GAME_ID=$(echo "$RESPONSE" | grep -o "\"id\":[0-9]*" | head -1 | cut -d: -f2)
        fi
        
        if [ -z "$GAME_ID" ] || [ "$GAME_ID" = "null" ]; then
          echo "❌ Could not find game ID for ${{ secrets.ITCH_GAME }}"
          echo "Available games in response:"
          echo "$RESPONSE" | grep -o '"title":"[^"]*"' || echo "No games found in response"
          exit 1
        fi
        
        echo "Found game ID: $GAME_ID"
        echo "GAME_ID=$GAME_ID" >> $GITHUB_OUTPUT
    
    - name: Create devlog post via itch.io API
      if: steps.check_devlog.outputs.devlog_exists == 'true'
      env:
        BUTLER_API_KEY: ${{ secrets.ITCH_IO_API_KEY }}
        GAME_ID: ${{ steps.get_game_id.outputs.GAME_ID }}
      run: |
        # Escape JSON strings properly
        ESCAPED_TITLE=$(echo "$DEVLOG_TITLE" | sed 's/"/\\"/g' | tr -d '\n\r')
        ESCAPED_BODY=$(echo "$DEVLOG_BODY" | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')
        
        # Create JSON payload
        JSON_PAYLOAD=$(cat <<EOF
        {
          "title": "$ESCAPED_TITLE",
          "body": "$ESCAPED_BODY",
          "published": true
        }
        EOF
        )
        
        echo "Creating devlog with payload:"
        echo "$JSON_PAYLOAD"
        
        # Make API request to create devlog
        RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" \
          -X POST \
          -H "Authorization: Bearer $BUTLER_API_KEY" \
          -H "Content-Type: application/json" \
          -d "$JSON_PAYLOAD" \
          "https://itch.io/api/1/game/$GAME_ID/devlog")
        
        HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)
        RESPONSE_BODY=$(echo "$RESPONSE" | sed '/HTTP_CODE:/d')
        
        echo "HTTP Status Code: $HTTP_CODE"
        echo "Response Body: $RESPONSE_BODY"
        
        if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "201" ]; then
          echo "✅ Devlog created successfully!"
        else
          echo "❌ Failed to create devlog. HTTP Code: $HTTP_CODE"
          echo "Response: $RESPONSE_BODY"
          exit 1
        fi
    
    - name: Archive devlog after posting
      if: steps.check_devlog.outputs.devlog_exists == 'true'
      run: |
        # Create archive directory if it doesn't exist
        mkdir -p devlogs/archive
        
        # Move devlog to archive with timestamp
        TIMESTAMP=$(date '+%Y%m%d_%H%M%S')
        mv devlogs/devlog.md "devlogs/archive/devlog_${TIMESTAMP}.md"
        
        echo "📁 Devlog archived as devlog_${TIMESTAMP}.md"
    
    - name: Commit archived devlog
      if: steps.check_devlog.outputs.devlog_exists == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add devlogs/archive/
        git diff --staged --quiet || git commit -m "Archive devlog after deployment [skip ci]"
        git push || echo "No changes to push"
